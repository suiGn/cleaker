const fs = require('fs');
const path = require('path');
const util = require('./util');
const endpoints = require('../resources/endpoints.json');
const models = require('../resources/models.json');
const specDefaults = require('../resources/specDefaults.json');
const specErrata = require('../resources/specErrata.json');
const builder = require('./builder');

const whitelist = [
  '/api/v1/users',
  '/api/v1/users/{userId}',
  '/api/v1/users/{userId}/appLinks',
  '/api/v1/users/{userId}/groups',
  '/api/v1/users/{userId}/lifecycle/activate',
  '/api/v1/users/{userId}/lifecycle/reactivate',
  '/api/v1/users/{userId}/lifecycle/deactivate',
  '/api/v1/users/{userId}/lifecycle/suspend',
  '/api/v1/users/{userId}/lifecycle/unsuspend',
  '/api/v1/users/{userId}/lifecycle/unlock',
  '/api/v1/users/{userId}/lifecycle/reset_password',
  '/api/v1/users/{userId}/lifecycle/expire_password',
  '/api/v1/users/{userId}/lifecycle/reset_factors',
  '/api/v1/users/{userId}/sessions',
  '/api/v1/users/{userId}/credentials/forgot_password',
  '/api/v1/users/{userId}/credentials/change_password',
  '/api/v1/users/{userId}/credentials/change_recovery_question',
  '/api/v1/users/{userId}/factors/{factorId}',
  '/api/v1/users/{userId}/factors',
  '/api/v1/users/{userId}/factors/catalog',
  '/api/v1/users/{userId}/factors/questions',
  '/api/v1/users/{userId}/factors',
  '/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate',
  '/api/v1/users/{userId}/factors/{factorId}/verify',
  '/api/v1/users/{userId}/roles',
  '/api/v1/users/{userId}/roles/{roleId}',
  '/api/v1/users/{userId}/roles/{roleId}/targets/groups',
  '/api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}',
  '/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps',
  '/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}',
  '/api/v1/groups',
  '/api/v1/groups/{groupId}',
  '/api/v1/groups/{groupId}/users',
  '/api/v1/groups/{groupId}/users/{userId}',
  '/api/v1/groups/rules',
  '/api/v1/groups/rules/{ruleId}',
  '/api/v1/groups/rules/{ruleId}/lifecycle/activate',
  '/api/v1/groups/rules/{ruleId}/lifecycle/deactivate',
  '/api/v1/groups/{groupId}/apps',
  '/api/v1/sessions',
  '/api/v1/sessions/{sessionId}',
  '/api/v1/sessions/{sessionId}/lifecycle/refresh',
  '/api/v1/apps',
  '/api/v1/apps/{appId}',
  '/api/v1/apps/{appId}/lifecycle/activate',
  '/api/v1/apps/{appId}/lifecycle/deactivate',
  '/api/v1/apps/{appId}/users',
  '/api/v1/apps/{appId}/users/{userId}',
  '/api/v1/apps/{appId}/groups',
  '/api/v1/apps/{appId}/groups/{groupId}',
  // '/api/v1/apps/{appId}/credentials/keys/generate', //OKTA-75280
  '/api/v1/apps/{appId}/credentials/keys',
  '/api/v1/apps/{appId}/credentials/keys/{keyId}',
  '/api/v1/apps/{appId}/credentials/keys/{keyId}/clone',
  '/api/v1/apps/{appId}/credentials/csrs',
  '/api/v1/apps/{appId}/credentials/csrs/{csrId}',
  '/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish'
];

const blacklist = [
  // including /users/me is redundant, because "id" and "me" are interchangeable
  '/api/v1/users/me.*',
  '/api/v1/sessions/me.*',

  '/api/v1/apps/{appId}/user/types/default', // this is handled by /api/v1/apps/{id}/user/types/{typeId}
  '/api/v1/events/nodelay', // undocumented - might require persistent open http request

  // Should be String or parsed XML?
  '/api/v1/apps/{appId}/sso/saml/metadata',
  '/api/v1/apps/{appId}/sso/wsfed/metadata',

  // Unclear response type(s)
  '/api/v1/apps/{appId}/types/{typeName}', // undocumented

  // return type models weren't picked up by the introspection endpoint
  '/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps',
  '/api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}',
  '/api/v1/events',

  '/api/v1/users/{userId}/devices.*',

  // Devmode only
  '/api/v1/apps/{appId}/customum_support',
  '/api/v1/apps/{appId}/enableFeatures',
  '/api/v1/apps/{appId}/externalKey',

  // Decide when we get to Apps
  '/api/v1/users/{userId}/catalog/apps',
  '/api/v1/groups/{groupId}/catalog/apps',
  '/api/v1/groups/{groupId}/apps'
]

const tags = {
  '/api/v1/users$': 'User',
  '/api/v1/users/{(id|userId)}(?!/factors).*': 'User',
  '/api/v1/users/{userId}/factors.*': 'UserFactor',
  '/api/v1/groups.*': 'Group',
  '/api/v1/sessions.*': 'Session',
  '/api/v1/apps.*': 'Application',
  '/api/v1/events.*': 'Event',
  '/api/v1/idps.*': 'Idp',
  '/api/v1/policies.*': 'Policy',
  '/api/v1/meta/schemas.*': 'Schema',
  '/api/v1/logs.*': 'Log',
  '/api/v1/templates.*': 'Template'
};

const modelTags = {
  'com.okta.api.mediation.dto.user.*': 'User',
  'com.okta.api.mediation.dto.role.MediationRoleAssignment': 'User',
  'com.okta.api.mediation.dto.group.*': 'Group',
  'com.okta.api.mediation.dto.session.*': 'Session',
  'com.okta.api.mediation.dto.app_instance.*': 'Application',
  'com.okta.api.mediation.dto.idp.*': 'Idp',
  'com.okta.api.mediation.dto.policy.*': 'Policy',
  'com.okta.api.mediation.dto.cvd.*': 'GroupRule',
  'com.okta.services.factors.*': 'UserFactor'
};

const modelRenameMap = {
  'com.okta.api.mediation.dto.user.Credentials': 'UserCredentials',
  'com.okta.api.mediation.dto.idp.Credentials': 'IdpCredentials',
  'com.okta.api.mediation.dto.cvd.policy.rules.actions.AssignUserToGroupsMediationAction': 'GroupRuleGroupAssignment',
  'com.okta.api.mediation.dto.cvd.policy.rules.actions.GroupMembershipMediationActions': 'GroupRuleAction',
  'com.okta.api.mediation.dto.cvd.policy.rules.conditions.GroupMembershipMediationConditions': 'GroupRuleConditions',
  'com.okta.api.mediation.dto.cvd.policy.rules.conditions.GroupMembershipMediationGroupCondition': 'GroupRuleGroupCondition',
  'com.okta.api.mediation.dto.cvd.policy.rules.conditions.expression.GroupMembershipMediationExpressionCondition': 'GroupRuleExpression',
  'com.okta.api.mediation.dto.cvd.policy.rules.conditions.GroupMembershipMediationPeopleCondition': 'GroupRulePeopleCondition',
  'com.okta.api.mediation.dto.cvd.policy.rules.GroupMembershipMediationRule': 'GroupRule',
  'com.okta.api.mediation.dto.cvd.policy.rules.conditions.GroupMembershipMediationUserCondition': 'GroupRuleUserCondition',
  'com.okta.api.mediation.dto.group.UserGroup': 'Group',
  'com.okta.api.mediation.dto.group.UserGroupProfile': 'GroupProfile',
  'com.okta.api.mediation.dto.group.UserGroupStats': 'GroupStats',
  'com.okta.api.mediation.dto.role.MediationRoleAssignment': 'Role',
  'com.okta.api.mediation.dto.user.ActivationToken': 'UserActivationToken',
  'com.okta.api.mediation.dto.user.AuthProvider': 'AuthenticationProvider',
  'com.okta.api.mediation.dto.user.ChangePasswordCredentials': 'ChangePasswordRequest',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance': 'Application',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Accessibility': 'ApplicationAccessibility',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Credentials': 'ApplicationCredentials',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Credentials$Signing': 'ApplicationCredentialsSigning',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Credentials$UsernameTemplate': 'ApplicationCredentialsUsernameTemplate',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Licensing': 'ApplicationLicensing',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Settings': 'ApplicationSettings',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Settings$Notifications': 'ApplicationSettingsNotifications',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Settings$Notifications$Vpn': 'ApplicationSettingsNotificationsVpn',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Settings$Notifications$Vpn$Network': 'ApplicationSettingsNotificationsVpnNetwork',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Visibility': 'ApplicationVisibility',
  'com.okta.api.mediation.dto.app_instance.PublicAppInstance$Visibility$Hide': 'ApplicationVisibilityHide',
  'com.okta.api.mediation.dto.app_assignment.GroupAppAssignment': 'ApplicationGroupAssignment',
  'com.okta.api.mediation.dto.certificate.JsonWebKeyRSAMediated': 'JsonWebKey',
  'com.okta.services.factors.iface.dto.lifecycle.FactorEnrollRequest': 'Factor',
  'com.okta.services.factors.iface.dto.lifecycle.FactorVerificationRequest': 'VerifyFactorRequest',
  'com.okta.services.factors.iface.dto.lifecycle.FactorVerificationResponse': 'VerifyFactorResponse',
  'com.okta.api.mediation.dto.session.Session$AuthenticationAuthority': 'SessionIdentityProvider',
  'com.okta.api.mediation.dto.session.SessionCredentials': 'CreateSessionRequest'
};

const pathRewriteMap = {
  '(/api/v1/users/{)(.*?)(}.*)': 'userId',
  '(/api/v1/users/{.*?}/roles/{)(.*?)(}.*)': 'roleId',
  '(/api/v1/users/{.*?}/factors/{)(.*?)(}.*)': 'factorId',
  '(/api/v1/users/{.*?}/factors/.*?/transactions/{)(.*?)(}.*)': 'transactionId',
  '(/api/v1/groups/{)(.*?)(}.*)': 'groupId',
  '(/api/v1/groups/{.*?}/users/{)(.*?)(}.*)': 'userId',
  '(/api/v1/groups/rules/{)(.*?)(}.*)': 'ruleId',
  '(/api/v1/apps/{)(.*?)(}.*)': 'appId',
  '(/api/v1/apps/{.*?}/users/{)(.*?)(}.*)': 'userId',
  '(/api/v1/apps/{.*?}/groupId/{)(.*?)(}.*)': 'groupId',
  '(/api/v1/apps/{.*?}/credentials/keys/{)(.*?)(}.*)': 'keyId',
  '(/api/v1/apps/{.*?}/credentials/csrs/{)(.*?)(}.*)': 'csrId',
  '(/api/v1/idps/{)(.*?)(}.*)': 'idpId',
  '(/api/v1/idps/tx/{)(.*?)(}.*)': 'transactionId',
  '(/api/v1/policies/{)(.*?)(}.*)': 'policyId',
  '(/api/v1/policies/{.*?}/rules/{)(.*?)(}.*)': 'ruleId',
  '(/api/v1/idps/credentials/keys/{)(.*?)(}.*)': 'keyId',
  '(/api/v1/sessions/{)(.*?)(}.*)': 'sessionId',
};

const docDir = path.resolve(__dirname, '../resources/docs');

const spec = builder.build({
  spec: specDefaults,
  specErrata,
  endpoints,
  models,
  whitelist,
  blacklist,
  tags,
  docDir,
  modelTags,
  modelRenameMap,
  pathRewriteMap
});

// write the spec to a file
const dir = path.resolve(__dirname, '../dist');
if (!fs.existsSync(dir)){
    fs.mkdirSync(dir);
}
fs.writeFileSync(path.join(dir, 'spec.json'), util.prettyJSON(spec));
